#!/usr/bin/env lua

if os.getenv("SPOODER_INIT") then
	-- could be something like `sudo -K`
	os.execute(os.getenv("SPOODER_INIT"))
end

local unpack = table.unpack

local function exit(...)
	if os.getenv("SPOODER_CLEANUP") then
		-- could be something like `sudo -K`
		os.execute(os.getenv("SPOODER_CLEANUP"))
	end
	os.exit(...)
end

local spooder = require 'spooder'

local lumber = require 'lumber'
local log = require 'lumber.global' {
	format = require 'lumber.format.term';
	level = lumber.levels.ERROR;
}

local function printhelp(parser, file, message)
	file = file or io.stdout
	file:write('spooder [arguments] [tasks]', "\n")
	local longest = 0
	for _, param in ipairs(parser) do
		longest = math.max(longest, #param.long)
	end
	for _, param in ipairs(parser) do
		file:write(string.format("\t%"..longest.."s\t%2s\t%s\n",
			param.long or '',
			param.short or '',
			param.description
		))
	end
	if message then
		file:write(message, "\n")
	end
end

local params do
	local arrr = require 'arrr'
	local parser = arrr {
		{ "List all tasks", "--tasks", "-T" };
		{ "Runs a task with arguments", "--task", nil, "*", repeatable = true };
		{ "Load a specific task file", "--taskfile", "-t", "<module> or <script>.lua" };
		{ "Changes the log level", "--log", "-L", true };
		{ "Prints help and quits", "--help", "-h" };
	}
	params = parser{...}
	if params.help then
		printhelp(parser, io.stdout, "88w88")
	elseif not next(params) then
		printhelp(parser, io.stderr, "»»~««")
		os.exit(1)
	end
end

if params.log then
	log.level = lumber.levels[string.upper(params.log)]
end

do
	local file if params.taskfile then
		file = params.taskfile
	else
		file = 'tasks'
	end
	xpcall(function()
		if file:find("%.lua$") then
			dofile(file)
		else
			require(file)
		end
	end, function(err)
		log:fatal("Failed loading task file: " .. err)
		log:debug(debug.traceback(err))
		exit()
	end)
end

if params.tasks then
	print("Available tasks:")
	local tasks = {}
	for name, task in spooder.tasks() do
		table.insert(tasks, name)
		tasks[name] = task
		table.sort(tasks)
	end

	local longest = 0
	for _, name in ipairs(tasks) do
		longest = math.max(longest, #name)
	end
	local format = "%"..(longest+1).."s "

	for _, name in ipairs(tasks) do
		local padded = format:format(name..":")
		local task = tasks[name]
		if task.description then
			print(""..padded..task.description:gsub("\n", "\n"..string.rep(" ", longest+2)))
		else
			print(""..padded)
		end
	end
end

xpcall(function()
	for _, name in ipairs(params) do
		spooder.run(name)
	end
	if params.task then
		for _, task in ipairs(params.task) do
			spooder.run(unpack(task))
		end
	end
end, function(err)
	log:fatal(err)
	log:debug(debug.traceback(err))
end)
